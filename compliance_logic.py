# compliance_logic.py

from datetime import datetime
import json
import hashlib # For data masking example, not for primary encryption

# --- Audit Logging (Framework Part 1, Sec 3, 5.3; Part 2, Sec 23) ---
# Aligns with `plan_audit_log` in `financial_plans` table or `audit_log_global`

def create_audit_log_entry(
    user_id: str, # MFD ID or "SYSTEM"
    action_type: str, # e.g., "INVESTOR_CREATE", "PLAN_UPDATE", "RISK_ASSESSMENT_VIEWED"
    investor_id_context: str = None, # Associated investor ID, if any
    details: dict = None, # Specifics of the action, e.g., { "field_changed": "income", "old_value": "50000", "new_value": "60000" }
    status: str = "SUCCESS", # "SUCCESS", "FAILURE"
    ip_address: str = None # Optional: IP address of the user performing action
) -> dict:
    """
    Creates a structured audit log entry.
    This entry would be saved to a dedicated audit log table in the database.
    """
    log_entry = {
        "timestamp": datetime.now().isoformat(),
        "user_id": user_id,
        "action_type": action_type,
        "status": status
    }
    if investor_id_context:
        log_entry["investor_id_context"] = investor_id_context
    if details:
        log_entry["details"] = details # Can be a JSONB field in DB
    if ip_address:
        log_entry["ip_address"] = ip_address # Store if available and relevant
    
    # In a real application, this would be: db_connection.save_audit_log(log_entry)
    # For now, we just return the structure.
    return log_entry

# --- Data Privacy & DPDP Act, 2023 Considerations ---

# 1. Encryption:
#    - As noted in app.py, Fernet is used for encrypting sensitive PII (e.g., financial_details JSON blob).
#    - This must be consistently applied before storing data in the database.
#    - Database-level encryption (at rest) for PostgreSQL should also be configured.

# 2. Data Masking (for display purposes, not a replacement for encryption):
def mask_sensitive_data(data_value: str, data_type: str = "generic") -> str:
    """
    Masks sensitive data for display. E.g., Mobile, Email, Aadhaar (if collected - not in current scope).
    This is a simplified example.
    """
    if not data_value or not isinstance(data_value, str):
        return "N/A"

    if data_type == "mobile": # e.g., "98XXXX3210"
        if len(data_value) == 10 and data_value.isdigit():
            return f"{data_value[:2]}XXXXXX{data_value[-2:]}"
    elif data_type == "email": # e.g., "t**t@example.com"
        parts = data_value.split("@")
        if len(parts) == 2:
            local_part, domain = parts
            if len(local_part) > 2:
                return f"{local_part[:1]}**{local_part[-1:]}@{domain}"
            return f"**@{domain}"
    # Generic masking for other PII
    if len(data_value) > 4:
        return f"XXXX{data_value[-4:]}"
    return "XXXX"

# 3. Consent Management:
#    - `communication_logic.py` includes `record_communication_consent`.
#    - Consent for data collection, processing, and communication must be explicitly obtained and logged.
#    - The `investors.consent_log` (JSONB field) in `database_schema.md` is designed for this.
#    - Ensure clear, granular consent options are provided to investors.

# 4. Data Minimization:
#    - Collect only necessary data for the financial planning service.
#    - Regularly review data fields to ensure they are still required.

# 5. Purpose Limitation:
#    - Use collected data only for the stated purpose of financial planning.
#    - Obtain fresh consent if data is to be used for new purposes.

# 6. Data Retention and Deletion:
#    - Define data retention policies based on legal requirements (e.g., SEBI regulations) and DPDP Act.
#    - Implement secure data deletion mechanisms when data is no longer needed or upon investor request (subject to legal holds).

# --- SEBI Compliance Considerations (General Notes) ---
# - MFDs are regulated entities. The application must support their compliance obligations.
# - Audit Trails: Comprehensive audit logs (as generated by `create_audit_log_entry`) are crucial for SEBI.
#   This includes logging MFD actions, plan changes, advice given (if captured systematically), and investor interactions.
# - Record Keeping: Maintain records as per SEBI (Mutual Fund) Regulations, 1996, and subsequent circulars.
#   This includes investor profiles, risk assessments, investment advice, transaction details (if app expands to execution).
# - Suitability Assessment: The risk profiling and goal-based investment suggestions are part of this.
#   Ensure the logic is transparent and justifiable.
# - Grievance Redressal: While not directly coded here, the app should facilitate MFDs in handling investor grievances.
# - Disclosure: Ensure all necessary disclosures are made to investors (e.g., in reports, guides).

def check_dpdp_compliance_points(data_handling_process_description: str) -> list:
    """Conceptual function to review a process against DPDP checklist points."""
    # This would be a manual review or a more sophisticated AI tool in a real scenario.
    checklist_points_met = []
    if "encryption of PII" in data_handling_process_description.lower():
        checklist_points_met.append("PII Encryption Considered")
    if "consent mechanism" in data_handling_process_description.lower():
        checklist_points_met.append("Consent Mechanism Considered")
    if "data minimization" in data_handling_process_description.lower():
        checklist_points_met.append("Data Minimization Considered")
    # ... add more checks
    return checklist_points_met

if __name__ == "__main__":
    print("--- Test Compliance Logic ---")

    # Test Audit Log Entry Creation
    log1 = create_audit_log_entry(
        user_id="MFD_RajeshK", 
        action_type="INVESTOR_PROFILE_UPDATE", 
        investor_id_context="INV-2025-001",
        details={"field_changed": "occupation", "old_value": "Blue-Collar", "new_value": "White-Collar"},
        ip_address="192.168.1.10"
    )
    print("\nSample Audit Log Entry 1:")
    print(json.dumps(log1, indent=2))

    log2 = create_audit_log_entry(
        user_id="SYSTEM",
        action_type="ECONOMIC_DATA_FETCH_FAILURE",
        details={"source_api": "RBI_Public_Data", "error": "Timeout"},
        status="FAILURE"
    )
    print("\nSample Audit Log Entry 2 (System Failure):")
    print(json.dumps(log2, indent=2))

    # Test Data Masking
    print("\nData Masking Tests:")
    print(f"Mobile '9876543210' masked: {mask_sensitive_data('9876543210', 'mobile')}")
    print(f"Mobile '12345' masked: {mask_sensitive_data('12345', 'mobile')}") # Invalid, generic mask
    print(f"Email 'john.doe@example.com' masked: {mask_sensitive_data('john.doe@example.com', 'email')}")
    print(f"Email 'me@example.com' masked: {mask_sensitive_data('me@example.com', 'email')}")
    print(f"Short Email 'a@b.co' masked: {mask_sensitive_data('a@b.co', 'email')}")
    print(f"Generic 'SecretValue123' masked: {mask_sensitive_data('SecretValue123', 'generic')}")
    print(f"Short Generic 'ABC' masked: {mask_sensitive_data('ABC', 'generic')}")

    # Conceptual DPDP Check
    process_desc = "Our system includes a consent mechanism and encryption of PII for all investor data."
    compliance_notes = check_dpdp_compliance_points(process_desc)
    print("\nDPDP Compliance Points Met (Conceptual):")
    for note in compliance_notes:
        print(f"- {note}")

    print("\nReminder: Actual data encryption, consent storage, and detailed audit logging need to be integrated into the main application and database operations.")


